locals {
  # Access to the source bucket
  
}


resource "aws_iam_role" "lambda_role" {
  name = "${local.ingestion_lambda_function_name}-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Action = "sts:AssumeRole",
      Effect = "Allow",
      Principal = {
        Service = "lambda.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_basic_execution" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

# Custom policies
resource "aws_iam_policy" "lambda_policy" {
  name        = "${local.ingestion_lambda_function_name}-policy"
  path        = "/"
  description = "Policy for Lambda function to access required AWS services"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Sid = "DataStoreAndVectorDBPermissions",
        Effect      = "Allow",
        Action = [
          "s3:GetObject",
          "s3:ListBucket",
          "s3:PutObject",
          "s3:DeleteObject"
        ],
        Resource = [
          aws_s3_bucket.data_source.arn,
          "${aws_s3_bucket.data_source.arn}/*",
          aws_s3_bucket.vector_db.arn,
          "${aws_s3_bucket.vector_db.arn}/*"
        ]
      },
      {
        Sid = "DynamoDBPermissions",
        Effect      = "Allow",
        Action = [
          "dynamodb:CreateTable",
          "dynamodb:DescribeTable",
          "dynamodb:PutItem",
          "dynamodb:GetItem",
          "dynamodb:UpdateItem",
          "dynamodb:DeleteItem",
          "dynamodb:Scan",
          "dynamodb:Query"
        ],
        Resource = aws_dynamodb_table.lance_db_commit_store.arn
      },
      {
        Sid = "TextractAndBedrockPermissions",
        Effect      = "Allow",
        Action = [
          "textract:*",
          "bedrock:*"
        ],
        Resource = "*"
      }
    ]
  })
}

# Attach Custom Policy to Lambda Role
resource "aws_iam_role_policy_attachment" "lambda_custom_policy" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = aws_iam_policy.lambda_policy.arn
}

module "lambda_function" {
  source  = "terraform-aws-modules/lambda/aws"
  version = "~> 5.0"

  function_name = local.ingestion_lambda_function_name
  description   = "Lambda function for reading data from S3 and storing in LanceDB"
  image_uri     = var.lambda_image_uri

  create_package = false
  package_type   = "Image"

  memory_size = 1024
  timeout     = 600

  lambda_role = aws_iam_role.lambda_role.arn

  environment_variables = {
    "SOURCE_BUCKET_NAME"  = aws_s3_bucket.data_source.bucket,
    "LANCEDB_S3_BUCKET"   = aws_s3_bucket.vector_db.bucket,
    "LANCEDB_S3_PATH"     = local.vector_db_s3_path,
    "DYNAMODB_TABLE_NAME" = local.dynamodb_table_name,
    "LOG_LEVEL"           = var.log_level,
  }
}

# Allow S3 to Invoke the Lambda Function
resource "aws_lambda_permission" "s3_lambda" {
  statement_id  = "AllowExecutionFromS3Bucket"
  action        = "lambda:InvokeFunction"
  function_name = module.lambda_function.lambda_function_name
  principal     = "s3.amazonaws.com"
  source_arn    = aws_s3_bucket.data_source.arn
}

# Configure S3 Event Notification to Trigger Lambda Function
resource "aws_s3_bucket_notification" "bucket_notification" {
  bucket = aws_s3_bucket.data_source.id

  lambda_function {
    lambda_function_arn = module.lambda_function.lambda_function_arn
    events              = ["s3:ObjectCreated:*"]
    filter_prefix       = local.lambda_s3_key_filter
  }

  depends_on = [aws_lambda_permission.s3_lambda]
}
